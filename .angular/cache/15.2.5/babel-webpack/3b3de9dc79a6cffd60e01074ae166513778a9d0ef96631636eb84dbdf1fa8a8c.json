{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../path/prediction-service.service\";\nexport let StatisticsComponent = /*#__PURE__*/(() => {\n  class StatisticsComponent {\n    constructor(predictionService) {\n      this.predictionService = predictionService;\n      /*\r\n        CT_folder: string | null = null;\r\n        PET_folder: string | null = null;\r\n       // plotUrl!: string;\r\n       // input_dir = '../dummyData/A200';\r\n       // imageURL!: string;\r\n      \r\n      //  constructor(private http: HttpClient) { }\r\n        constructor() { }\r\n        \r\n        ngOnInit() {\r\n          //const inputDir = '../dummyData/A200';\r\n          // Set the URL of the API endpoint that returns the plot data\r\n          //this.plotUrl = `/api/plot?input_dir=${this.input_dir}`;\r\n        }\r\n        \r\n        \r\n        //we take CT and PET folder input here and\r\n        onFileSelected(event: any, folderType: string) {\r\n          const files = event.target.files;\r\n          const fileArr = Array.prototype.slice.call(files);\r\n        \r\n          // Check if all files in folder are DICOM format\r\n          const invalidFiles = fileArr.filter(file => !file.name.endsWith('.dcm'));\r\n          if (invalidFiles.length > 0) {\r\n            alert(`Invalid files in ${folderType} folder. Only DICOM files are allowed.`);\r\n            return;\r\n          }\r\n      \r\n          // Store folder path based on folder type\r\n          if (folderType === 'CT') {\r\n          this.CT_folder = files[0].webkitRelativePath.split(files[0].name)[0];\r\n          } else if (folderType === 'PET') {\r\n            this.PET_folder = files[0].webkitRelativePath.split(files[0].name)[0];\r\n          }\r\n      \r\n        }\r\n        \r\n        //to prediction\r\n        onUpload() {\r\n          // Check if both folders are selected\r\n          if (!this.CT_folder || !this.PET_folder) {\r\n            alert('Please select both CT and PET folders.');\r\n            return;\r\n          }\r\n        \r\n          console.log(\"onUpload() ok\");\r\n      \r\n          if (this.CT_folder.length > 0 && this.PET_folder.length > 0) {\r\n            const CTData = new FormData();\r\n            const PETData = new FormData();\r\n            for (let i = 0; i < this.CT_folder.length; i++) {\r\n              CTData.append(\"file[]\", this.CT_folder[i], this.CT_folder[i].name);\r\n            }\r\n            // Call your service method and pass formData as parameter\r\n            this.myService.uploadFolder(formData).subscribe(result => {\r\n              console.log(result);\r\n            });\r\n          }\r\n      \r\n          // Call prediction class with folder paths\r\n          //this.predictionService.predict(this.CT_folder, this.PET_folder).subscribe(result => {\r\n            // handle result here\r\n          //}, error => {\r\n          //  console.log(error);\r\n          //});\r\n        }\r\n          */\n      this.ctFolder = null;\n      this.petFolder = null;\n    }\n    ngOnInit() {}\n    onFolderSelected(event, folderType) {\n      const files = event?.target?.files;\n      if (files?.length) {\n        const allowedExtensions = ['dcm'];\n        const selectedFiles = Array.from(files);\n        const selectedFileNames = selectedFiles.map(file => file.name);\n        const invalidFiles = selectedFileNames.filter(name => {\n          const extension = name.split('.').pop();\n          return extension && !allowedExtensions.includes(extension);\n        });\n        if (invalidFiles.length > 0) {\n          console.log(`Invalid ${folderType} files: ${invalidFiles.join(', ')}`);\n          return;\n        }\n        if (folderType === 'CT') {\n          this.ctFolder = selectedFiles[0];\n        } else if (folderType === 'PET') {\n          this.petFolder = selectedFiles[0];\n        }\n      }\n    }\n    onUpload() {\n      if (this.ctFolder && this.petFolder) {\n        this.predictionService.predictionResults(this.ctFolder, this.petFolder);\n        console.log(\"ok\");\n      }\n    }\n  }\n  StatisticsComponent.ɵfac = function StatisticsComponent_Factory(t) {\n    return new (t || StatisticsComponent)(i0.ɵɵdirectiveInject(i1.PredictionServiceService));\n  };\n  StatisticsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StatisticsComponent,\n    selectors: [[\"app-statistics\"]],\n    decls: 29,\n    vars: 0,\n    consts: [[1, \"card\"], [1, \"card-head\"], [1, \"card-body\"], [\"for\", \"ctrl\"], [\"type\", \"file\", \"webkitdirectory\", \"\", \"directory\", \"\", \"required\", \"\", 3, \"change\"], [\"type\", \"submit\", 2, \"background-color\", \"#04383f\", \"color\", \"aliceblue\", \"margin\", \"5px\", \"border-radius\", \"5px\", \"width\", \"150px\", \"height\", \"25px\", 3, \"click\"]],\n    template: function StatisticsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Diagnosis\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"hr\");\n        i0.ɵɵelementStart(3, \"div\", 0)(4, \"div\", 1);\n        i0.ɵɵtext(5, \"Please upload CT and PET scans in the respective fields\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 2)(7, \"label\", 3);\n        i0.ɵɵtext(8, \"CT Scans\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"input\", 4);\n        i0.ɵɵlistener(\"change\", function StatisticsComponent_Template_input_change_9_listener($event) {\n          return ctx.onFolderSelected($event, \"CT\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\", 3);\n        i0.ɵɵtext(11, \"PET Scans\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 4);\n        i0.ɵɵlistener(\"change\", function StatisticsComponent_Template_input_change_12_listener($event) {\n          return ctx.onFolderSelected($event, \"PET\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function StatisticsComponent_Template_button_click_13_listener() {\n          return ctx.onUpload();\n        });\n        i0.ɵɵtext(14, \"Upload\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(15, \"div\", 0)(16, \"div\", 1);\n        i0.ɵɵtext(17, \"Results\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 2);\n        i0.ɵɵtext(19, \" Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quas ducimus soluta, quasi aut ipsa non, ullam enim rem repudiandae, vitae provident animi. Inventore rerum, voluptas optio dignissimos blanditiis modi illo! \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 0)(21, \"div\", 1);\n        i0.ɵɵtext(22, \"3D visualization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 2);\n        i0.ɵɵtext(24, \" Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quas ducimus soluta, quasi aut ipsa non, ullam enim rem repudiandae, vitae provident animi. Inventore rerum, voluptas optio dignissimos blanditiis modi illo! \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(25, \"br\")(26, \"br\")(27, \"hr\")(28, \"br\");\n      }\n    },\n    styles: [\"h1[_ngcontent-%COMP%]{margin-left:1.5rem;font-size:24px;font-weight:700;color:#04383f}.card-body[_ngcontent-%COMP%]{font-weight:50;color:#04383f}.card-head[_ngcontent-%COMP%]{font-size:18px;font-weight:700;color:#04383f}input[_ngcontent-%COMP%]{width:100%;border:2px solid #aaa;border-radius:10px;margin:8px 0;outline:none;padding:8px;box-sizing:border-box;transition:.3s}input[_ngcontent-%COMP%]:focus{border-color:#04383f;box-shadow:0 0 8px #04383f}\"]\n  });\n  return StatisticsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}